{"/home/travis/build/npmtest/node-npmtest-reload/test.js":"/* istanbul instrument in package npmtest_reload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-reload/lib.npmtest_reload.js":"/* istanbul instrument in package npmtest_reload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_reload = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_reload = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-reload/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-reload && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_reload */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_reload\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_reload.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_reload.rollup.js'] =\n            local.assetsDict['/assets.npmtest_reload.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_reload.__dirname + '/lib.npmtest_reload.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-reload/node_modules/reload/lib/reload.js":"var path = require('path')\nvar fs = require('fs')\n\nvar RELOAD_FILE = path.join(__dirname, './reload-client.js')\n\nmodule.exports = function reload (httpServer, expressApp, verboseLogging) {\n  var reloadCode = fs.readFileSync(RELOAD_FILE, 'utf8')\n\n  var connections = new Set()\n  var WebSocketServer = require('ws').Server\n  var wss = new WebSocketServer({ server: httpServer })\n\n  wss.on('connection', (ws) => {\n    connections.add(ws)\n    ws.on('close', function () {\n      connections.delete(ws)\n    })\n\n    if (verboseLogging) {\n      console.log('Reload client connected to server')\n    }\n  })\n\n  if (verboseLogging) {\n    reloadCode = reloadCode.replace('verboseLogging = false', 'verboseLogging = true')\n  }\n\n  expressApp.get('/reload/reload.js', function (req, res) {\n    res.type('text/javascript')\n    res.send(reloadCode)\n  })\n\n  function sendMessage (message) {\n    if (verboseLogging) {\n      console.log('Sending message to ' + (connections.size) + ' connections: ' + message)\n    }\n    for (let conn of connections) {\n      conn.send(message, function (error) {\n        if (error) {\n          console.error(error)\n        }\n      })\n    }\n  }\n\n  // Return an object, so that the user can manually reload the server by calling the returned function reload. Using the web socket connection from above, we provide a function called reload which passes the command 'reload' to the function sendMessage. sendMessage sends the message 'reload' over the socket (if the socket is connected) to the client. The client then recieves the messages checks to see if the message is reload and then reloads the page.\n  return {\n    'connections': connections,\n    'server': reload,\n    'reload': function () {\n      sendMessage('reload')\n    },\n    'sendMessage': sendMessage\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-reload/node_modules/reload/expressSampleApp/server.js":"var express = require('express')\nvar http = require('http')\nvar path = require('path')\nvar reload = require('reload')\nvar bodyParser = require('body-parser')\nvar logger = require('morgan')\n\nvar app = express()\n\nvar publicDir = path.join(__dirname, 'public')\n\napp.set('port', process.env.PORT || 3000)\napp.use(logger('dev'))\napp.use(bodyParser.json()) // Parses json, multi-part (file), url-encoded\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(publicDir, 'index.html'))\n})\n\nvar server = http.createServer(app)\n\n// Reload code here\nreload(server, app)\n\nserver.listen(app.get('port'), function () {\n  console.log('Web server listening on port ' + app.get('port'))\n})\n","/home/travis/build/npmtest/node-npmtest-reload/node_modules/reload/lib/reload-client.js":"(function refresh () {\n  var verboseLogging = false\n  var socketUrl = window.location.origin.replace(/^http(s?):\\/\\//, 'ws$1://')\n  var socket\n\n  if (verboseLogging) {\n    console.log('Reload Script Loaded')\n  }\n\n  if (!('WebSocket' in window)) {\n    throw new Error('Reload only works with browsers that support WebSockets')\n  }\n\n  // Explanation of the flags below:\n\n  // The first change flag is used to tell reload to wait until the socket closes at least once before we allow the page to open on a socket open event. Otherwise reload will go into a inifite loop, as the page will have a socket on open event once it loads for the first time\n  var firstChangeFlag = false\n\n  // The navigatedAwayFromPageFlag is set to true in the event handler onbeforeunload because we want to short-circuit reload to prevent it from causing the page to reload before the navigation occurs.\n  var navigatedAwayFromPageFlag\n\n    // Wait until the page loads for the first time and then call the webSocketWaiter function so that we can connect the socket for the first time\n  window.addEventListener('load', function () {\n    if (verboseLogging === true) {\n      console.log('Page Loaded - Calling webSocketWaiter')\n    }\n    websocketWaiter()\n  })\n\n  // If the user navigates away from the page, we want to short-circuit reload to prevent it from causing the page to reload before the navigation occurs.\n  window.addEventListener('beforeunload', function () {\n    if (verboseLogging === true) {\n      console.log('Navigated away from the current URL')\n    }\n\n    navigatedAwayFromPageFlag = true\n  })\n\n  // Check to see if the server sent us reload (meaning a manually reload event was fired) and then reloads the page\n  var socketOnMessage = function (msg) {\n    if (msg.data === 'reload') {\n      socket.close()\n    }\n  }\n\n  var socketOnOpen = function (msg) {\n    if (verboseLogging) {\n      console.log('Socket Opened')\n    }\n\n    // We only allow the reload on two conditions, one when the socket closed (firstChange === true) and two if we didn't navigate to a new page (navigatedAwayFromPageFlag === false)\n    if (firstChangeFlag === true && navigatedAwayFromPageFlag !== true) {\n      if (verboseLogging) {\n        console.log('Reloaded')\n      }\n\n      // Reset the firstChangeFlag to false so that when the socket on open events are being fired it won't keep reloading the page\n      firstChangeFlag = false\n\n      // Now that everything is set up properly we reload the page\n      window.location.reload()\n    }\n  }\n\n  // Socket on close event that sets flags and calls the webSocketWaiter function\n  var socketOnClose = function (msg) {\n    if (verboseLogging) {\n      console.log('Socket Closed - Calling webSocketWaiter')\n    }\n\n    // We encountered a change so we set firstChangeFlag to true so that as soon as the server comes back up and the socket opens we can allow the reload\n    firstChangeFlag = true\n\n    // Call the webSocketWaiter function so that we can open a new socket and set the event handlers\n    websocketWaiter()\n  }\n\n  var socketOnError = function (msg) {\n    if (verboseLogging) {\n      console.log(msg)\n    }\n  }\n\n  // Function that opens a new socket and sets the event handlers for the socket\n  function websocketWaiter () {\n    if (verboseLogging) {\n      console.log('Waiting for socket')\n    }\n    setTimeout(function () {\n      socket = new WebSocket(socketUrl) // eslint-disable-line\n\n      socket.onopen = socketOnOpen\n      socket.onclose = socketOnClose\n      socket.onmessage = socketOnMessage\n      socket.onerror = socketOnError\n    }, 250)\n  }\n})()\n","/home/travis/build/npmtest/node-npmtest-reload/node_modules/reload/lib/reload-server.js":"var express = require('express')\nvar http = require('http')\nvar path = require('path')\nvar reload = require('../lib/reload')\nvar fs = require('fs')\nvar open = require('open')\nvar clc = require('cli-color')\nvar argv = require('minimist')(process.argv.slice(2))\n\nvar app = express()\n\nvar port = argv._[0]\nvar dir = argv._[1]\nvar openBrowser = (argv._[2] === 'true')\nvar hostname = argv._[3]\nvar runFile = argv._[4]\nvar startPage = argv._[5]\nvar verbose = (argv._[6] === 'true')\n\nvar router = express.Router()\n\napp.set('port', port)\n\nrouter.get('/', function (req, res, next) {\n  // Create the start page path.\n  var startFile = path.join(dir, startPage)\n\n  fs.exists(startFile, function (itDoes) {\n    // If the start page exists send the reload-client code to the HTML.\n    if (itDoes) {\n      sendhtml(startFile, res)\n    } else {\n      // Else the start page doesn't exist (whether it's the deault index.html or specified).\n      res.status(404).send(\"Can't find \" + startPage)\n    }\n  })\n})\n\n// Routing for any HTML, so that we can send the reload-client file to every HTML page when naviagted too.\nrouter.get('*.html', function (req, res) {\n  // This wouldn't be efficient in any other context.\n  var file = path.join(dir, req.url)\n  sendhtml(file, res)\n})\n\napp.use('/', router)\napp.use('*html', router)\n\napp.use(express.static(dir)) // Should cache static assets.\n\nvar server = http.createServer(app)\n\n// Reload call and configurations.\nreload(server, app, verbose)\n\nserver.listen(app.get('port'), function () {\n  if (!fs.existsSync(runFile)) {\n    fs.writeFile(runFile, '')\n\n    // If openBrowser, open the browser with the given start page above, at a hostname (localhost default or specified).\n    if (openBrowser) {\n      open('http://' + hostname + ':' + app.get('port'))\n    }\n  } else {\n    console.log(clc.green('restarting...'))\n  }\n})\n\n// Function to send reload-client code to the browser.\nfunction sendhtml (file, res) {\n  fs.readFile(file, 'utf8', function (err, contents) {\n    if (err) {\n      console.error(err)\n      process.exit(1)\n    }\n\n    contents += '\\n\\n<!-- Inserted by Reload -->\\n<script src=\"/reload/reload.js\"></script>\\n<!-- End Reload -->\\n'\n    res.type('text/html')\n    res.send(contents)\n  })\n}\n"}